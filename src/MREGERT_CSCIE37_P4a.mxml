<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" xmlns:local="*"
			   initialize="initializeHandler(event)"
			   creationComplete="creationCompleteHandler(event)">
	<fx:Metadata>
		// Strings resource file
		[ResourceBundle("resources")]
	</fx:Metadata> 
	<fx:Declarations>
		<!-- Flower App Supported Languages REST Call --> 
		<s:HTTPService id="flowerServiceLangRequest"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="flowerServiceLangRequest_resultHandler(event)">
		</s:HTTPService> 
		
		<!-- Flower App Supported Markets REST Call --> 
		<s:HTTPService id="flowerServiceMarketRequest"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="flowerServiceMarketRequest_resultHandler(event)">
		</s:HTTPService>
		
		<!-- Flower App Supported Flowers REST Call --> 
		<s:HTTPService id="flowerServiceFlowerRequest"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="flowerServiceFlowerRequest_resultHandler(event)">
		</s:HTTPService>
		
		<!-- Flower App Flowers by Market REST Call --> 
		<s:HTTPService id="flowerServiceFlowersByMarketRequest"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="flowerServiceFlowerRequest_resultHandler(event)">
		</s:HTTPService>
		
		<!-- Flower App Occasions by Market REST Call --> 
		<s:HTTPService id="flowerServiceOccasionsByMarketRequest"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="flowerServiceOccasionsByMarketRequest_resultHandler(event)">
		</s:HTTPService>
		
		<!-- Flower App Flowers by Market and Occasion REST Call --> 
		<s:HTTPService id="flowerServiceFlowersByMarketAndOccasionRequest"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="flowerServiceFlowerRequest_resultHandler(event)">
		</s:HTTPService>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.globalization.CurrencyFormatter;
			import flash.globalization.DateTimeFormatter;
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			//******************************************
			// CONSTANTS
			protected const URL_BASE: String = "http://flowerservice20160406025332.azurewebsites.net";
			protected const URL_LANGUAGES: String = "/languages";
			protected const URL_MARKETS: String = "/markets";
			protected const URL_FLOWERS: String = "/flowers";
			protected const URL_OCCASIONS: String = "/occasions";
			
			//******************************************
			// MODEL OBJECTS
			// Normally, I'd convert these to actual strongly-typed class objects but just use Object here
			[Bindable] protected var faLanguages: ArrayCollection = new ArrayCollection();
			[Bindable] protected var faRegions: ArrayCollection = new ArrayCollection();
			[Bindable] protected var faMarkets: ArrayCollection = new ArrayCollection();
			[Bindable] protected var faOccasions: ArrayCollection = new ArrayCollection();
			
			[Bindable] protected var selectedLanguageIndex: Number;
			[Bindable] protected var selectedRegionIndex: Number;
			[Bindable] protected var selectedMarketIndex: Number;
			[Bindable] protected var selectedOccasionIndex: Number;
			
			protected var faFlowers: Array = new Array();
			//protected var faOccasions: Object = new Object();
			//protected var faOccasionsIds: Array = new Array();
			//protected var currentOccasionIndex:int = 0;
			
			
			/* Initially set the preferred locale to use the user's default linguistic preferences, as specified in the
			user's operating system settings. For example, such preferences are typically set using the "Control Panel"
			for Windows, or the "System Preferences" in Mac OS X.
			*/
			[Bindable]
			protected var preferredLocale: String = LocaleID.DEFAULT;
			
			[Bindable]
			protected var preferredRegion: String; // Will be fill in during initialization
			
			/* Create a locale ID class.
			
			The LocaleID class provides methods for parsing and using locale ID names. This class supports locale ID
			names that use the syntax defined by the Unicode Technical Standard #35 (http://unicode.org/reports/tr35/).
			*/
			[Bindable]
			protected var localeId:LocaleID;
			
			/* The DateTimeFormatter class provides locale-sensitive formatting for Date objects and access to localized
			date field names. The methods of this class use functions and settings provided by the operating system.
			There are two ways to select a date time format: using a predefined pattern or a custom pattern. For most
			applications the predefined styles specified by the DateTimeStyle constants (LONG, MEDIUM, NONE, or SHORT
			should be used. These constants specify the default patterns for the requested locale or the default patterns
			based on the user's operating system settings.
			
			When an instance of this class is created, if the requested locale is supported by the operating system then
			the properties of the instance are set according to the conventions and defaults of the requested locale and
			the constructor's dateStyle and timeStyle parameters. If the requested locale is not available, then the
			properties are set according to a fallback or default system locale, which can be retrieved using the
			actualLocaleIDName property.
			
			This class contains additional methods to get localized strings for month names and weekday names, and to
			retrieve the first day of the week that can be used in a calendar picker or other similar application.
			
			Due to the use of the user's settings, the use of formatting patterns provided by the operating system,
			and the use of a fallback locale when a requested locale is not supported, different users can see different
			formatting results even when using the same locale ID.
			*/
			[Bindable]
			protected var dateTimeFormatter: DateTimeFormatter;
			
			/* The CurrencyFormatter class provides locale-sensitive formatting and parsing of currency values.
			
			The CurrencyFormatter class uses the data and functionality provided by the operating system and is designed
			to format currency values according to the conventions of a specific locale and type of currency. The position
			of the currency symbol, the negative symbol, the decimal separator, the grouping separator, the grouping
			pattern decimal separator, and other elements can vary depending on the locale.
			
			If the operating system supports the requested locale, the properties and currency type are set according to the
			conventions and defaults of the requested locale. If the requested locale is not available, then the properties
			are set according to a fallback or default system locale, which can be retrieved using the actualLocaleIDName
			property.
			
			Due to the use of the user's settings, the use of formatting patterns provided by the operating system, and the
			use of a fallback locale when a requested locale is not supported, different users can see different formatting
			results, even when using the same locale ID.
			*/
			[Bindable]
			protected var currencyFormatter: CurrencyFormatter;
			
			
			//*****************************************************************
			// METHODS		
			protected function initializeHandler(event:FlexEvent):void
			{
				callLog.text = "";
				updateLocaleSettings();
				
				flowerServiceLangRequest.url = URL_BASE + URL_LANGUAGES;
				callLog.text += flowerServiceLangRequest.url + "\n";
				flowerServiceLangRequest.send();
				
				flowerServiceMarketRequest.url = URL_BASE + URL_MARKETS;
				callLog.text += flowerServiceMarketRequest.url + "\n";
				flowerServiceMarketRequest.send();
				
				flowerServiceFlowerRequest.url = URL_BASE + URL_FLOWERS;
				callLog.text += flowerServiceFlowerRequest.url + "\n";
				flowerServiceFlowerRequest.send();
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				
			}
			
			protected function updateLocaleSettings():void {
				// Create a new date/time formatter object based on the preferred locale.
				dateTimeFormatter = new DateTimeFormatter(preferredLocale);
				
				// Saving the preferred region so it doesn't get overwritten by Flex - BUG in Flex
				if (preferredLocale == "i-default") {
					preferredRegion = dateTimeFormatter.actualLocaleIDName.slice(3,5).toLowerCase();
					selectedRegionIndex = 0;
				}
				
				// Create c currency formatter object based on the preferred locale.
				currencyFormatter = new CurrencyFormatter(preferredLocale);
				
				// Create a new locale ID object based on the locale name from the date time formatter
				localeId = new LocaleID(dateTimeFormatter.actualLocaleIDName);
				
				callLog.text += "Changing language to: " + preferredLocale + "\n";
				callLog.text += "Changing region to: " + preferredRegion + "\n";
			}
			
			//*****************************************************************
			// HTTP REQUEST EVENT HANDLERS
			//-----------------------------------------------------------------------------			
			protected function flowerServiceLangRequest_resultHandler(event:ResultEvent):void
			{
				faLanguages = new ArrayCollection();
				var languages: Array = JSON.parse(event.result.toString()) as Array;
				for (var index:Object in languages) {
					var language: Object = languages[index];
					var menuOption: Object = new Object();
					menuOption["data"] = language["LanguageId"];
					menuOption["label"] = language["LocalizedNames"][0]["Value"];
					faLanguages.addItem(menuOption);
					if (localeId.getLanguage() == language["LanguageId"]) {
						selectedLanguageIndex = Number(index);
					}
				}
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceMarketRequest_resultHandler(event:ResultEvent):void
			{
				faMarkets = new ArrayCollection();
				faRegions = new ArrayCollection();
				var markets: Array = JSON.parse(event.result.toString()) as Array;
				for (var index:Object in markets) {
					var market: Object = markets[index];
					var region: Object = market[index];
					var marketMenuOption: Object = new Object();
					var regionMenuOption: Object = new Object();
					var marketId: String = market["MarketId"];
					var language: String = localeId.getLanguage().toLowerCase();
					marketMenuOption["data"] = marketId;
					regionMenuOption["data"] = marketId;
					for each (var marketName: Object in market["MarketName"]) {
						if (language == marketName["Key"]) {
							marketMenuOption["label"] = marketName["Value"];
							regionMenuOption["label"] = marketName["Value"];
						}
					}
					faMarkets.addItem(marketMenuOption);
					faRegions.addItem(regionMenuOption);
					if (localeId.getRegion() == market["MarketId"]) {
						selectedMarketIndex = Number(index);
					}
				}
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceFlowerRequest_resultHandler(event:ResultEvent):void
			{
				faFlowers = new Array();
				var flowers: Array = JSON.parse(event.result.toString()) as Array;
				var output: String = "";
				for (var index:Object in flowers) {
					var flower: Object = flowers[index];
					faFlowers.push(flower);
				}
				renderFlowerPanels();
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceOccasionsByMarketRequest_resultHandler(event:ResultEvent):void
			{
				faOccasions = new ArrayCollection();
				var occasions: Array = JSON.parse(event.result.toString()) as Array;
				for (var index:Object in occasions) {
					var occasion: Object = occasions[index];
					var menuOption: Object = new Object();
					menuOption["data"] = occasion["OccasionId"];
					for each (var displayName: Object in occasion["DisplayName"]) {
						if (localeId.getLanguage().toLowerCase() == displayName["Key"]) {
							menuOption["label"] = displayName["Value"];
						}
					}
					faOccasions.addItem(menuOption);
				}
			}
			
			protected function renderFlowerPanels(): void {
				myFlow.removeAllElements();
				for each (var flower:Object in faFlowers) {
					var panel:FlowerPanel = new FlowerPanel();
					panel.localeId = localeId;
					panel.baseUrl = URL_BASE; // Should be done differently, but works
					panel.flower = flower;
					panel.width = 350;
					panel.height = 250;
					myFlow.addElement(panel);
				}
			}
			
			protected function getLocalizedFlowerName(flower: Object): String {
				var localizedName: String = "";
				for (var kvPairIndex: Object in flower["DisplayName"]) {
					var kvPair:Object = flower["DisplayName"][kvPairIndex];
					if (kvPair["Key"] == localeId.getLanguage()) {
						localizedName = kvPair["Value"];		
					}
				}
				if (localizedName == "") {
					localizedName = "Not Found: " + flower["GlobalDisplayName"];
				}
				return localizedName;
			}
			
			protected function dlLanguages_changeHandler(event:IndexChangeEvent):void
			{
				callLog.text += "---------------------------------------\n";
				preferredLocale = faLanguages[event.newIndex]["data"];
				updateLocaleSettings();
				flowerServiceLangRequest.url = URL_BASE + URL_LANGUAGES + "?languages=" + localeId.getLanguage().toLowerCase();
				callLog.text += flowerServiceLangRequest.url + "\n";
				flowerServiceLangRequest.send();
				flowerServiceMarketRequest.url = URL_BASE + URL_MARKETS + "?languages=" + localeId.getLanguage().toLowerCase();
				callLog.text += flowerServiceMarketRequest.url + "\n";
				flowerServiceMarketRequest.send();
				renderFlowerPanels();
				
				// The language changed, so reset the market and occasions as the available options may have changed.
				selectedMarketIndex = -1;
				selectedOccasionIndex = -1;
			}
			
			protected function dlMarkets_changeHandler(event:IndexChangeEvent):void
			{
				callLog.text += "---------------------------------------\n";
				selectedMarketIndex = event.newIndex;
				// Get the flowers for this market
				var marketId: String = faMarkets[selectedMarketIndex].data;
				flowerServiceFlowersByMarketRequest.url = URL_BASE + "/" + marketId + URL_FLOWERS + "?languages=" + localeId.getLanguage().toLowerCase() + "&billingRegion=" + preferredRegion;
				callLog.text += flowerServiceFlowersByMarketRequest.url + "\n";
				flowerServiceFlowersByMarketRequest.send();
				
				// Get the occasions for this market
				flowerServiceOccasionsByMarketRequest.url = URL_BASE + "/" + marketId + URL_OCCASIONS + "?languages=" + localeId.getLanguage().toLowerCase();
				callLog.text += flowerServiceOccasionsByMarketRequest.url + "\n";
				flowerServiceOccasionsByMarketRequest.send();
				
				// The market changed, so reset the occasions as the available options may have changed.
				selectedOccasionIndex = -1;
			}
			
			protected function dlOccasions_changeHandler(event:IndexChangeEvent):void
			{
				callLog.text += "---------------------------------------\n";
				selectedOccasionIndex = event.newIndex;
				// Get the flowers for this market and occasion
				var marketId: String = faMarkets[selectedMarketIndex].data;
				var occasionId: String = faOccasions[selectedOccasionIndex].data;
				flowerServiceFlowersByMarketAndOccasionRequest.url = URL_BASE + "/" + marketId + "/" + occasionId + URL_FLOWERS + "?languages=" + localeId.getLanguage().toLowerCase() + "&billingRegion=" + preferredRegion;
				callLog.text += flowerServiceFlowersByMarketAndOccasionRequest.url + "\n";
				flowerServiceFlowersByMarketRequest.send();
			}
			
			protected function dlRegion_changeHandler(event:IndexChangeEvent):void
			{
				selectedRegionIndex = event.newIndex;
				preferredRegion = faRegions[selectedRegionIndex].data;
				// Get the flowers for this market and occasion
				flowerServiceFlowerRequest.url = URL_BASE + URL_FLOWERS + "?languages=" + localeId.getLanguage().toLowerCase() + "&billingRegion=" + preferredRegion;
				callLog.text += flowerServiceFlowerRequest.url + "\n";
				flowerServiceFlowerRequest.send();
				
				// The region changed, so reset the market and occasions as the available options may have changed.
				selectedMarketIndex = -1;
				selectedOccasionIndex = -1;
				
			}
			
		]]>
	</fx:Script>
	
	
	<s:Scroller left="1" right="1" top="1" bottom="1">
		<s:VGroup width="100%" height="100%">
			<s:HGroup>
				<s:VGroup>
					<s:Label text="Language:"/>
					<s:DropDownList id="dlLanguages"
									dataProvider="{faLanguages}"
									selectedIndex="{selectedLanguageIndex}" 
									change="dlLanguages_changeHandler(event)"
									width="200"/>
				</s:VGroup>
				
				<s:VGroup>
					<s:Label text="Region:"/>
					<s:DropDownList id="dlRegion"
									dataProvider="{faRegions}" 
									selectedIndex="{selectedRegionIndex}"
									change="dlRegion_changeHandler(event)"
									width="200"/>
				</s:VGroup>
				
				<s:VGroup>
					<s:Label text="Market:"/>
					<s:DropDownList id="dlMarkets" 
									prompt="{resourceManager.getString('resources', 'marketPrompt')}"
									dataProvider="{faMarkets}" 
									selectedIndex="{selectedMarketIndex}"
									change="dlMarkets_changeHandler(event)"
									width="200"/>
				</s:VGroup>
				
				<s:VGroup>
					<s:Label text="Occasion:"/>
					
					<s:DropDownList id="dlOccasions" 
									dataProvider="{faOccasions}" 
									prompt="{resourceManager.getString('resources', 'occasionPrompt')}"
									selectedIndex="{selectedOccasionIndex}"
									change="dlOccasions_changeHandler(event)"
									width="200"/>
				</s:VGroup>
			</s:HGroup>
			<mx:Tile id="myFlow" 
					 direction="horizontal" 
					 borderStyle="solid"
					 paddingTop="10" paddingBottom="10" 
					 paddingRight="10" paddingLeft="10" 
					 verticalGap="15" horizontalGap="10"
					 verticalCenter="100" horizontalCenter="0"/>
			
			<s:Label id="callLog" text=""/>
		</s:VGroup>
	</s:Scroller>
	
	
	
	
	
</s:Application>
