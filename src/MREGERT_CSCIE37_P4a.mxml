<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" xmlns:local="*"
			   initialize="initializeHandler(event)"
			   creationComplete="creationCompleteHandler(event)">
	<fx:Metadata>
		// Strings resource file
		[ResourceBundle("resources")]
	</fx:Metadata> 
	<fx:Declarations>
		<!-- Flower App Supported Languages REST Call --> 
		<s:HTTPService id="flowerServiceLangRequest"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="flowerServiceLangRequest_resultHandler(event)"
					   fault="flowerServiceLangRequest_faultHandler(event)"> 
		</s:HTTPService> 
		
		<!-- Flower App Supported Markets REST Call --> 
		<s:HTTPService id="flowerServiceMarketRequest"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="flowerServiceMarketRequest_resultHandler(event)"
					   fault="flowerServiceMarketRequest_faultHandler(event)">
		</s:HTTPService>
		
		<!-- Flower App Supported Flowers REST Call --> 
		<s:HTTPService id="flowerServiceFlowerRequest"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="flowerServiceFlowerRequest_resultHandler(event)"
					   fault="flowerServiceFlowerRequest_faultHandler(event)">
		</s:HTTPService>
		
		<!-- Flower App Flowers by Market REST Call --> 
		<s:HTTPService id="flowerServiceFlowersByMarketRequest"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="flowerServiceFlowersByMarketRequest_resultHandler(event)"
					   fault="flowerServiceFlowersByMarketRequest_faultHandler(event)">
		</s:HTTPService>
		
		<!-- Flower App Occasions by Market REST Call --> 
		<s:HTTPService id="flowerServiceOccasionsByMarketRequest"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="flowerServiceOccasionsByMarketRequest_resultHandler(event)"
					   fault="flowerServiceOccasionsByMarketRequest_faultHandler(event)">
			
		</s:HTTPService>
		
		<!-- Flower App Flowers by Market and Occasion REST Call --> 
		<s:HTTPService id="flowerServiceFlowersByMarketAndOccasionRequest"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="flowerServiceFlowersByMarketAndOccasionRequest_resultHandler(event)"
					   fault="flowerServiceFlowersByMarketAndOccasionRequest_faultHandler(event)">
		</s:HTTPService>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.globalization.CurrencyFormatter;
			import flash.globalization.DateTimeFormatter;
			import flash.globalization.LastOperationStatus;
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			//******************************************
			// CONSTANTS
			protected const URL_BASE: String = "http://flowerservice20160406025332.azurewebsites.net";
			protected const URL_LANGUAGES: String = "/languages";
			protected const URL_MARKETS: String = "/markets";
			protected const URL_FLOWERS: String = "/flowers";
			protected const URL_OCCASIONS: String = "/occasions";
			
			//******************************************
			// MODEL OBJECTS
			// Normally, I'd convert these to actual strongly-typed class objects but just use Object here
			[Bindable] protected var faLanguages: ArrayCollection = new ArrayCollection();
			[Bindable] protected var selectedLocaleIndex:Number;
			protected var faMarkets: Array = new Array();
			protected var faFlowers: Array = new Array();
			protected var faOccasions: Object = new Object();
			protected var faOccasionsIds: Array = new Array();
			protected var currentOccasionIndex:int = 0;
			
			//******************************************
			// ATTRIBUTES
			[Bindable]
			protected var marketId: String;
			
			[Bindable]
			protected var occasionId: String;
			
			[Bindable]
			protected var localeOptions: ArrayCollection = new ArrayCollection(["i-default", "en_US", "de_DE", "fr_FR", "ko_KR", "ja_JP", "ru_RU"]);
			
			
			/* Initially set the preferred locale to use the user's default linguistic preferences, as specified in the
			user's operating system settings. For example, such preferences are typically set using the "Control Panel"
			for Windows, or the "System Preferences" in Mac OS X.
			*/
			[Bindable]
			protected var preferredLocale: String = LocaleID.DEFAULT;
			
			/* Create a locale ID class.
			
			The LocaleID class provides methods for parsing and using locale ID names. This class supports locale ID
			names that use the syntax defined by the Unicode Technical Standard #35 (http://unicode.org/reports/tr35/).
			*/
			[Bindable]
			protected var localeId:LocaleID;
			
			/* The DateTimeFormatter class provides locale-sensitive formatting for Date objects and access to localized
			date field names. The methods of this class use functions and settings provided by the operating system.
			There are two ways to select a date time format: using a predefined pattern or a custom pattern. For most
			applications the predefined styles specified by the DateTimeStyle constants (LONG, MEDIUM, NONE, or SHORT
			should be used. These constants specify the default patterns for the requested locale or the default patterns
			based on the user's operating system settings.
			
			When an instance of this class is created, if the requested locale is supported by the operating system then
			the properties of the instance are set according to the conventions and defaults of the requested locale and
			the constructor's dateStyle and timeStyle parameters. If the requested locale is not available, then the
			properties are set according to a fallback or default system locale, which can be retrieved using the
			actualLocaleIDName property.
			
			This class contains additional methods to get localized strings for month names and weekday names, and to
			retrieve the first day of the week that can be used in a calendar picker or other similar application.
			
			Due to the use of the user's settings, the use of formatting patterns provided by the operating system,
			and the use of a fallback locale when a requested locale is not supported, different users can see different
			formatting results even when using the same locale ID.
			*/
			[Bindable]
			protected var dateTimeFormatter: DateTimeFormatter;
			
			/* The CurrencyFormatter class provides locale-sensitive formatting and parsing of currency values.
			
			The CurrencyFormatter class uses the data and functionality provided by the operating system and is designed
			to format currency values according to the conventions of a specific locale and type of currency. The position
			of the currency symbol, the negative symbol, the decimal separator, the grouping separator, the grouping
			pattern decimal separator, and other elements can vary depending on the locale.
			
			If the operating system supports the requested locale, the properties and currency type are set according to the
			conventions and defaults of the requested locale. If the requested locale is not available, then the properties
			are set according to a fallback or default system locale, which can be retrieved using the actualLocaleIDName
			property.
			
			Due to the use of the user's settings, the use of formatting patterns provided by the operating system, and the
			use of a fallback locale when a requested locale is not supported, different users can see different formatting
			results, even when using the same locale ID.
			*/
			[Bindable]
			protected var currencyFormatter: CurrencyFormatter;
			
			
			//*****************************************************************
			// METHODS		
			protected function initializeHandler(event:FlexEvent):void
			{
				updateLocaleSettings();
				
				flowerServiceLangRequest.url = URL_BASE + URL_LANGUAGES;
				flowerServiceLangRequest.send();
				
				flowerServiceMarketRequest.url = URL_BASE + URL_MARKETS;
				flowerServiceMarketRequest.send();
				
				flowerServiceFlowerRequest.url = URL_BASE + URL_FLOWERS;
				flowerServiceFlowerRequest.send();
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				
				// Get the occasions for this market
				flowerServiceOccasionsByMarketRequest.url = URL_BASE + "/" + localeId.getRegion().toLowerCase() + URL_OCCASIONS + "?languages=" + localeId.getLanguage().toLowerCase();
				flowerServiceOccasionsByMarketRequest.send();
				
				
				// Call the Flower Services
				//flowerServiceLangRequest.url = URL_BASE + URL_LANGUAGES + "?languages=" + localeId.getLanguage().toLowerCase();
				//flowerServiceLangRequest.send();
				
				//flowerServiceMarketRequest.url = URL_BASE + URL_MARKETS + "?languages=" + localeId.getLanguage().toLowerCase();
				//flowerServiceMarketRequest.send();
				
				//flowerServiceFlowerRequest.url = URL_BASE + URL_FLOWERS + "?languages=" + localeId.getLanguage().toLowerCase() + "&billingRegion=" + localeId.getRegion().toLowerCase();
				//flowerServiceFlowerRequest.send();
				
				// Get the flowers for this market
				//flowerServiceFlowersByMarketRequest.url = URL_BASE + "/" + localeId.getRegion().toLowerCase() + URL_FLOWERS + "?languages=" + localeId.getLanguage().toLowerCase() + "&billingRegion=" + localeId.getRegion().toLowerCase();
				//flowerServiceFlowersByMarketRequest.send();
				
				
			}
			
			protected function updateLocaleSettings():void {
				// Create a new date/time formatter object based on the preferred locale.
				dateTimeFormatter = new DateTimeFormatter(preferredLocale);
				
				// Create c currency formatter object based on the preferred locale.
				currencyFormatter = new CurrencyFormatter(preferredLocale);
				
				// Create a new locale ID object based on the locale name from the date time formatter
				localeId = new LocaleID(dateTimeFormatter.actualLocaleIDName);
			}
			
			//-----------------------------------------------------------------------------			
/*			protected function localeSelecton_changeHandler(event:IndexChangeEvent):void {
				preferredLocale = String(localeOptions.getItemAt(localeSelecton.selectedIndex));
				var lang: String = String(localeOptions.getItemAt(localeSelecton.selectedIndex));
				resourceManager.localeChain = [lang, "en_US"];
				creationCompleteHandler(null);
			}
	*/		
			//-----------------------------------------------------------------------------			
			[Bindable (event="propertyChange")]
			protected function getFirstDayOfWeek():String {
				var weekDayNames: Vector.<String> = dateTimeFormatter.getWeekdayNames();
				var firstDayWeekIndex:int = dateTimeFormatter.getFirstWeekday();
				return weekDayNames[firstDayWeekIndex];
			}
			
			//-----------------------------------------------------------------------------			
			protected function vectorToArray(v: Object): Array {
				var ret: Array = new Array();
				for each(var str: String in v) {
					ret.push(str);
				}
				return ret;
			}
			
			//*****************************************************************
			// HTTP REQUEST EVENT HANDLERS
			//-----------------------------------------------------------------------------			
			protected function flowerServiceLangRequest_resultHandler(event:ResultEvent):void
			{
				faLanguages = new ArrayCollection();
				var output:String = "";
				var languages: Array = JSON.parse(event.result.toString()) as Array;
				for (var index:Object in languages) {
					var language: Object = languages[index];
					faLanguages.addItem(language["LocalizedNames"][0]["Value"]);
					if (localeId.getLanguage() == language["LanguageId"]) {
						selectedLocaleIndex = Number(index);
				    }
				}
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceLangRequest_faultHandler(event:FaultEvent):void
			{
				//FIX			flowerServiceLanguages.text = event.message.toString();
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceMarketRequest_resultHandler(event:ResultEvent):void
			{
				faMarkets = new Array();
				var output:String = "";
				var markets: Array = JSON.parse(event.result.toString()) as Array;
				for (var index:Object in markets) {
					var market: Object = markets[index];	
					// Save the data
					faMarkets.push(market);
				}
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceMarketRequest_faultHandler(event:FaultEvent):void
			{
				//FIX				flowerServiceMarkets.text = event.message.toString();
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceFlowerRequest_resultHandler(event:ResultEvent):void
			{
				faFlowers = new Array();
				var flowers: Array = JSON.parse(event.result.toString()) as Array;
				var output: String = "";
				for (var index:Object in flowers) {
					var flower: Object = flowers[index];
					faFlowers.push(flower);
				}
				renderFlowerPanels();
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceFlowerRequest_faultHandler(event:FaultEvent):void
			{
				//FIX				flowerServiceFlowers.text = event.message.toString();
				
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceFlowersByMarketRequest_resultHandler(event:ResultEvent):void
			{
				//FIXflowerByMarket.text = "";
				var url:String = event.target.url;
				var tokens:Array = url.split('/', 4);
				var currentMarket:String = tokens[3]; // UGLY HACK, but it works for now
				var output:String = "Market=" + currentMarket + ": ";
				var flowers: Array = JSON.parse(event.result.toString()) as Array;
				for (var index:Object in flowers) {
					var flower: Object = flowers[index];
					output += getLocalizedFlowerName(flower);
					if (index < flowers.length-1) {
						output += " , ";
					}
				}
				output += "\n";
				//FIXflowerByMarket.text += output;
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceFlowersByMarketRequest_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceOccasionsByMarketRequest_resultHandler(event:ResultEvent):void
			{
				//FIXoccasionsByMarket.text = "";
				var url:String = event.target.url;
				var tokens:Array = url.split('/', 4);
				var currentMarket:String = tokens[3]; // UGLY HACK, but it works for now
				var output:String = "Market=" + currentMarket + ": ";
				var occasions: Array = JSON.parse(event.result.toString()) as Array;
				for (var index:Object in occasions) {
					var occasion: Object = occasions[index];
					faOccasions[occasion["OccasionId"]] = occasion;
					faOccasionsIds.push(occasion["OccasionId"]);
					output += occasion["GlobalDisplayName"];
					if (index < occasions.length-1) {
						output += " , ";
					}
				}
				output += "\n";
				//FIXoccasionsByMarket.text += output;
				
				//BUG - calling the flowers by market and occasions asynchronously in a loop has problems, force it to call it in order
				//FIXflowersByOccasionsAndMarket.text = ""; // Reset 
				flowerServiceFlowersByMarketAndOccasionRequest.url = URL_BASE + "/" + localeId.getRegion().toLowerCase() + "/" + faOccasionsIds[currentOccasionIndex] + URL_FLOWERS + "?languages=" + localeId.getLanguage().toLowerCase() + "&billingRegion=" + localeId.getRegion().toLowerCase() + "&rand=" + Math.random();
				flowerServiceFlowersByMarketAndOccasionRequest.send();
			}
			
			//-----------------------------------------------------------------------------			
			// Now get the flowers for each occasion for this market

			
			protected function flowerServiceOccasionsByMarketRequest_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceFlowersByMarketAndOccasionRequest_resultHandler(event:ResultEvent):void
			{
				var flowers: Array = JSON.parse(event.result.toString()) as Array;
				var url:String = event.target.url;
				var tokens:Array = url.split('/', 5);
				var currentOccasion:String = tokens[4]; // UGLY HACK, but it works for now
				var occasion:Object = faOccasions[currentOccasion];
				
				//now append output here
				var output: String = "Occasion=" + occasion["GlobalDisplayName"] + ": Flowers=";  
				for (var index:Object in flowers) {
					var flower: Object = flowers[index];
					output += getLocalizedFlowerName(flower);
					if (index < flowers.length-1) {
						output += " , ";
					}
				}
				output += "\n";

				//FIXflowersByOccasionsAndMarket.text += output;
					
				//BUG - calling the flowers by market and occasions asynchronously in a loop has problems, force it to call it in order
				currentOccasionIndex++;
				if (currentOccasionIndex < faOccasionsIds.length-1) {
					flowerServiceFlowersByMarketAndOccasionRequest.url = URL_BASE + "/" + localeId.getRegion().toLowerCase() + "/" + faOccasionsIds[currentOccasionIndex] + URL_FLOWERS + "?languages=" + localeId.getLanguage().toLowerCase() + "&billingRegion=" + localeId.getRegion().toLowerCase() + "&rand=" + Math.random();
					flowerServiceFlowersByMarketAndOccasionRequest.send();
				}
			}
			
			//-----------------------------------------------------------------------------			
			protected function flowerServiceFlowersByMarketAndOccasionRequest_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function renderFlowerPanels(): void {
				myFlow.removeAllElements();
				for each (var flower:Object in faFlowers) {
					var panel:FlowerPanel = new FlowerPanel();
					panel.localeId = localeId;
					panel.baseUrl = URL_BASE; // Should be done differently, but works
					panel.flower = flower;
					panel.occasionsById = faOccasions;
					panel.width = 350;
					panel.height = 250;
					myFlow.addElement(panel);
				}
			}
			
			protected function getLocalizedFlowerName(flower: Object): String {
				var localizedName: String = "";
				for (var kvPairIndex: Object in flower["DisplayName"]) {
					var kvPair:Object = flower["DisplayName"][kvPairIndex];
					if (kvPair["Key"] == localeId.getLanguage()) {
						localizedName = kvPair["Value"];		
					}
				}
				if (localizedName == "") {
					localizedName = "Not Found: " + flower["GlobalDisplayName"];
				}
				return localizedName;
			}
			
			protected function dlLanguages_changeHandler(event:IndexChangeEvent):void
			{
				updateLocaleSettings();
				flowerServiceLangRequest.url = URL_BASE + URL_LANGUAGES + "?languages=" + localeId.getLanguage().toLowerCase();
				flowerServiceLangRequest.send();
				renderFlowerPanels();
			}
			
		]]>
	</fx:Script>
	
	
	<s:Scroller left="1" right="1" top="1" bottom="1">
		<s:VGroup>
			<s:HGroup>
				<s:DropDownList id="dlLanguages" dataProvider="{faLanguages}" selectedIndex="{selectedLocaleIndex}" change="dlLanguages_changeHandler(event)"/>
				<s:DropDownList id="dlMarkets"/>
			</s:HGroup>
			<mx:Tile id="myFlow" 
					 direction="horizontal" 
					 borderStyle="solid"
					 paddingTop="10" paddingBottom="10" 
					 paddingRight="10" paddingLeft="10" 
					 verticalGap="15" horizontalGap="10"
					 verticalCenter="100" horizontalCenter="0"/>
		</s:VGroup>
	</s:Scroller>
	
	
	
	
	
</s:Application>
